from datetime import datetime, timedelta
from airflow import DAG
from airflow.decorators import task
from airflow.models import DagRun
from airflow.sensors.external_task import ExternalTaskSensor
from airflow.operators.empty import EmptyOperator
from airflow.utils.trigger_rule import TriggerRule
from airflow.utils.session import provide_session
from airflow.api.common.experimental.trigger_dag import trigger_dag
import logging


# -----------------------------
# Configs
# -----------------------------
CONFIG_IDS = ["config_001", "config_002", "config_003"]
MAIN_DAG_ID = "validation_job_dag"  # <-- child DAG to trigger

default_args = {
    "owner": "data-engineering",
    "depends_on_past": False,
    "start_date": datetime(2024, 1, 1),
    "email_on_failure": True,
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}


# -----------------------------
# Controller DAG
# -----------------------------
with DAG(
    dag_id="controller_validation_dag",
    default_args=default_args,
    schedule_interval=None,
    catchup=False,
    max_active_runs=1,
    tags=["controller", "validation"],
) as dag:

    start = EmptyOperator(task_id="start")

    # --------------------------
    # Step 1: Trigger child DAGs
    # --------------------------
    @task
    def trigger_main_dag(config_id: str):
        """Trigger one run of MAIN_DAG_ID and return its run_id."""
        run_id = f"{config_id}__{datetime.utcnow().isoformat()}"
        dr = trigger_dag(
            dag_id=MAIN_DAG_ID,
            run_id=run_id,
            conf={"config_id": config_id},
            replace_microseconds=False,
        )
        logging.info(f"Triggered {MAIN_DAG_ID} for {config_id} with run_id={dr.run_id}")
        return {"config_id": config_id, "run_id": dr.run_id}

    # 🔑 Mapping happens here (safe — on Python task, not operator)
    triggered_runs = trigger_main_dag.expand(config_id=CONFIG_IDS)

    # --------------------------
    # Step 2: Wait for each run
    # --------------------------
    wait = ExternalTaskSensor.partial(
        task_id="wait_validation",
        external_dag_id=MAIN_DAG_ID,
        external_task_id=None,        # wait for whole DAG
        allowed_states=["success"],
        failed_states=["failed"],
        poke_interval=60,             # check every 1 min
        timeout=7200,                 # 2h max wait
        mode="reschedule",
    ).expand(
        external_run_id=triggered_runs.map(lambda x: x["run_id"])
    )

    # --------------------------
    # Step 3: Summarize results
    # --------------------------
    @task(trigger_rule=TriggerRule.ALL_DONE)
    def generate_summary(run_ids: list):
        @provide_session
        def get_state(dag_id, run_id, session=None):
            dr = (
                session.query(DagRun)
                .filter(DagRun.dag_id == dag_id, DagRun.run_id == run_id)
                .first()
            )
            return dr.state if dr else "not_found"

        results = {r["config_id"]: get_state(MAIN_DAG_ID, r["run_id"]) for r in run_ids}

        logging.info("📊 Validation Summary:")
        for cfg, state in results.items():
            logging.info(f" - {cfg}: {state}")

        return {"total": len(run_ids), "results": results}

    summary = generate_summary(triggered_runs)

    # --------------------------
    # Step 4: Notification
    # --------------------------
    @task(trigger_rule=TriggerRule.ALL_DONE)
    def send_notification(summary: dict):
        total = summary["total"]
        results = summary["results"]

        success = sum(1 for s in results.values() if s == "success")
        failed = sum(1 for s in results.values() if s == "failed")

        emoji = "✅" if failed == 0 else "⚠️"
        msg = f"""
{emoji} Controller DAG Report

Total Configs: {total}
✅ Success: {success}
❌ Failed: {failed}

Details: {results}
"""
        logging.info(msg)
        return msg

    notify = send_notification(summary)

    end = EmptyOperator(task_id="end", trigger_rule=TriggerRule.ALL_DONE)

    # --------------------------
    # DAG Flow
    # --------------------------
    start >> triggered_runs >> wait >> summary >> notify >> end
